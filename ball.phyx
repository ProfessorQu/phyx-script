let gravity = 3;
let bounciness = 1.3;

let rows = 4;
let columns = 4;

let x_offset = columns * 10;
let y_offset = rows * 10;

let num_circles = rows * columns;

fn add_circle(i) {
    let c = square {
        gravity,
        bounciness,
        color: hsv(i * (360 / num_circles), 1.0, 1.0),
        x: (i % rows) * 20 - x_offset,
        y: floor(i / rows) * 20 - y_offset,
    };

    if (i % 2 == 0){
        c = circle {
            gravity,
            bounciness,
            color: hsv(i * (360 / num_circles), 1.0, 1.0),
            x: (i % rows) * 20 - x_offset,
            y: floor(i / rows) * 20 - y_offset,
        }
    }

    objects.add(c)
}

for i in range(num_circles) {
    add_circle(i)
}

objects.add(ring {
    size: 300
})

